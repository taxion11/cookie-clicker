name: Go App Manual Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_to_ecr:
        description: "Deploy to ECR?"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      environment:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - "dev"
          - "staging"
          - "prod"

  # プルリクでのテストのみ（ECRプッシュなし）
  pull_request:
    branches: [main]
    paths:
      - "go-app/**"

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: cookie-clicker-dev-ecr-go

permissions:
  id-token: write # OIDC用（重要！）
  contents: read # リポジトリ読み取り

jobs:
  test:
    name: Test Go Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go-app/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ./go-app
        run: |
          if [ -f go.mod ]; then
            go mod download
          else
            echo "go.mod not found, initializing..."
            go mod init cookie-clicker-go
            go mod tidy
          fi

      - name: Run tests
        working-directory: ./go-app
        run: |
          # テストファイルが存在する場合のみ実行
          if ls *_test.go 1> /dev/null 2>&1; then
            go test -v ./...
          else
            echo "No test files found, skipping tests"
          fi

      - name: Run go vet
        working-directory: ./go-app
        run: go vet ./...

      - name: Build application
        working-directory: ./go-app
        run: go build -o main .

  deploy:
    name: Deploy to ECR
    runs-on: ubuntu-latest
    needs: test
    # 手動実行 かつ ECRデプロイが true の場合のみ実行
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_ecr == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-GoApp
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS connection
        run: |
          echo "Verifying AWS connection..."
          aws sts get-caller-identity
          echo "Checking ECR repository..."
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          cd go-app

          # Dockerfileの存在確認
          if [ ! -f Dockerfile ]; then
            echo "Dockerfile not found, creating a simple one..."
            cat > Dockerfile << 'EOF'
          FROM golang:1.21-alpine AS builder
          WORKDIR /app
          COPY . .
          RUN go mod download || go mod init cookie-clicker-go
          RUN go build -o main .

          FROM alpine:latest
          RUN apk --no-cache add ca-certificates curl
          WORKDIR /root/
          COPY --from=builder /app/main .
          EXPOSE 8080
          CMD ["./main"]
          EOF
          fi

          # Docker build and push
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          echo "Pushing images to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Verify deployment
        run: |
          echo "✅ Go application image pushed successfully!"
          echo "📦 Image: ${{ steps.build-image.outputs.image }}"
          echo "🌍 Environment: ${{ github.event.inputs.environment }}"
          echo "🔗 ECR Repository: ${{ env.ECR_REPOSITORY }}"

          # ECRでイメージ確認
          aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} --max-items 5
